using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using EasyStorage;

namespace RTSEngine
{
    /// <summary>
    /// Game settings, stored in a custom xml file. The reason for this is
    /// we want to be able to store our game data on the Xbox360 too.
    /// On the PC we could just use a Settings/config file and have all the
    /// code autogenerated for us, but this way it works both on PC and Xbox.
    /// Note: The default instance for the game settings is in this class,
    /// this way we get the same behaviour as for normal Settings files!
    /// </summary>
    [Serializable]
    public class GameSettings
    {
        public static ISaveDevice SaveDevice;

        public static XmlSerializer Serializer = new XmlSerializer(typeof(GameSettings));

        public static string FileNameOptions = "RTSGame_Options";
        public static string ContainerName = "RTSGame_Container";

        #region Properties
        private string _playerName = "Unknow";
        /// <summary>
        /// Player name.
        /// </summary>
        public string PlayerName
        {
            get { return _playerName; }
            set
            {
                if (_playerName != value)
                    _needSave = true;
                _playerName = value;
            }
        }

        public const int MinimumResolutionWidth = 640;

        private int _resolutionWidth = 0;
        /// <summary>
        /// Resolution width.
        /// </summary>
        public int ResolutionWidth
        {
            get { return _resolutionWidth; }
            set
            {
                if (_resolutionWidth != value)
                    _needSave = true;
                _resolutionWidth = value;
            }
        }

        public const int MinimumResolutionHeight = 480;

        private int _resolutionHeight = 0;
        /// <summary>
        /// Resolution height.
        /// </summary>
        public int ResolutionHeight
        {
            get { return _resolutionHeight; }
            set
            {
                if (_resolutionHeight != value)
                    _needSave = true;
                _resolutionHeight = value;
            }
        }

        private bool _fullscreen = false;
        /// <summary>
        /// Fullscreen.
        /// </summary>
        public bool Fullscreen
        {
            get { return _fullscreen; }
            set
            {
                if (_fullscreen != value)
                    _needSave = true;
                _fullscreen = value;
            }
        }

        private float _soundVolume = 0.8f;
        /// <summary>
        /// Sound volume.
        /// </summary>
        public float SoundVolume
        {
            get { return _soundVolume; }
            set
            {
                if (_soundVolume != value)
                    _needSave = true;
                _soundVolume = value;
            }
        }

        private float _musicVolume = 0.6f;
        /// <summary>
        /// Music volume.
        /// </summary>
        public float MusicVolume
        {
            get { return _musicVolume; }
            set
            {
                if (_musicVolume != value)
                    _needSave = true;
                _musicVolume = value;
            }
        }

        private float _controllerSensitivity = 0.5f;
        /// <summary>
        /// Controller sensitivity.
        /// </summary>
        public float ControllerSensitivity
        {
            get { return _controllerSensitivity; }
            set
            {
                if (_controllerSensitivity != value)
                    _needSave = true;
                _controllerSensitivity = value;
            }
        }
        #endregion

        #region Default
        /// <summary>
        /// Filename used to store the game settings.
        /// </summary>
        const string SettingsFilename = "GameSetting.xml";

        private static GameSettings _defaultInstance = null;
        /// <summary>
        /// Default instance of the game settings.
        /// </summary>
        public static GameSettings Default
        {
            get { return _defaultInstance; }
        }

        /// <summary>
        /// Need to save the game settings file only if true.
        /// </summary>
        private static bool _needSave = false;
        #endregion

        #region Constructor
        /// <summary>
        /// No public constructor! Create the game settings.
        /// </summary>
        private GameSettings()
        {
        }

        /// <summary>
        /// Create game settings.  This constructor helps us to only load the
        /// GameSetting once, not again if GameSetting is recreated by
        /// the Deserialization process.
        /// </summary>
        public static void Initialize()
        {
            _defaultInstance = new GameSettings();

            Load();
        }
        #endregion

        #region Load
        /// <summary>
        /// Load
        /// </summary>
        public static void Load()
        {
            _needSave = false;
            if (SaveDevice != null &&
                SaveDevice.FileExists(ContainerName, FileNameOptions))
            {
                try
                {
                    SaveDevice.Load(ContainerName, FileNameOptions, DeserializeTest);
                }
                catch
                {
                }
            }
        }

        private static void DeserializeTest(Stream stream)
        {
            GameSettings loadedGameSetting = (GameSettings)Serializer.Deserialize(stream);
            if (loadedGameSetting != null)
                _defaultInstance = loadedGameSetting;
        }

        #endregion

        #region Save
        private void Save()
        {
            // No need to save if everything is up to date.
            if (!_needSave)
                return;

            _needSave = false;

            // serialize out some XML data
            try
            {
                SaveDevice.Save(ContainerName, FileNameOptions, SerializeTest);
            }
            catch
            {
            }
        }

        private void SerializeTest(Stream stream)
        {
            Serializer.Serialize(stream, _defaultInstance);
        }

        #endregion
    }

}
